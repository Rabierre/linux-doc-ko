NOTE:
This is a version of Documentation/SubmittingDrivers (from Linux-3.7.5),
translated into Korean.
Note that the purpose of this file is to be easier to read in Korean and
is not intended as a fork. If you have any comments or updates for this file
please try to update the original English file first.
If this translation is outdated or has any problem with translation,
contact the translator or maintainer of this file.
===
이 문서는 Documentation/SubmittingDrivers (Linux-3.7.5)의
한글 번역본입니다.
이 문서의 내용에 문제나 수정할 것이 있다면 먼저 영어 원문을 확인하고 수정하는
것이 맞습니다. 번역이 잘못되었거나, 영어 원문이 개정되었다면 아래 번역자 또는
문서 관리자에게 연락하시기 바랍니다.

Translated by: Minsuk Lee <minsuk@hansung.ac.kr>
Translated on: SUN 2013 FEB 05

===

Linux 커널 드라이버의 제출 
--------------------------

이 문서는 다양한 커널 트리에 장치 드라이버를 제출하는 방법을 설명하기 위한
것입니다. 만약 비디오 카드 드라이버에 관심이 있다면 여기가 아니라 아마도,
XFree86 (http://www.xfree86.org/)나 X.Org (http://x.org/)에서 이야기를
해야한다는 점에 주의하시기 바랍니다.

디바이스 번호의 할당
--------------------

블록과 문자 드라이버를 위한 메이저, 마이너 번호는 리눅스 명칭 및 번호 할당
담당자에 의해 결정됩니다(현재는 Torben Mathiasen 씨가 맡고 있습니다.)
사이트는 http://www.lanana.org/ 입니다. 여기서는 리눅스 메인스트림 커널에 
들어가지 않은 장치들에 대한 번호 할당도 담당합니다. 이에 대한 더 많은 정보는
Documentation/devices.txt를 참조하시기 바랍니다.

누구에게 드라이버를 제출하는가 ?
--------------------------------

Linux 2.0:
    이 커널 트리를 위한 새로운 드라이버를 접수하지 않습니다.

Linux 2.2:
    이 커널 트리를 위한 새로운 드라이버를 접수하지 않습니다.

Linux 2.4:
    만약 그 코드 영역에 관리자가 있다면, 그 커널 소스의 MAINTAINERS 파일의
    목록에 있는 해당 관리자에게 제출하시면 됩니다. 만일 그 관리자가 응답을
    하지 않거나, 적당한 관리자를 찾지 못했다면 Willy Tarreau <w@1wt.eu>에게
    연락하시기 바랍니다.

Linux 2.6:
    2.4 버전과 같은 규칙이 적용되지만, API의 변화를 추적하기 위하여,
    linux-kernel을 주시해야 한다는 점이 다릅니다. Linux 2.6에 제출하는 경우
    최종 담당자는 Andrew Morton 입니다.
    

받아들여지기 위한 조건
----------------------

라이선스:  코드는 반드시 GNU GPL(General Public License)에 의해
        배포되어야 합니다. 우리는 배타적인 GPL 라이선스를 고집하지는
        않습니다. 따라서 드라이버가 BSD와 같은 다른 커뮤니티에서도
        유용하게 되기를 원한다면, 복수의 라이선스를 적용하도록
        배포해도 좋습니다.
        가능한 라이선스는 include/linux/module.h에서 볼 수 있습니다.

저작권:    저작권 소유자는 반드시 GPL의 사용에 동의해야 합니다. 제출자와
        저작권 소유자가 같은 사람/독립체면 가장 좋습니다. 그렇지 않다면
        저작권 소유자의 의지를 확인하기 위하여 GPL의 사용을 허가한
        사람/독립체의 이름을 명시해야 합니다. 
        
인터페이스:  만일, 드라이버가 기존의 인터페이스를 이용하고, 동급의 다른
        드라이버와 유사하게 동작한다면, 불필요한 API를 새로 만든 경우보다
        훨씬 더 받아들여질 가능성이 높을 것입니다. 혹시 Linux와 NT 드라이버
        양쪽에 적용될 공통 API를 만들고 싶다면, 사용자 영역에서 하시면 됩니다.        
        
코드:     코드 포맷은 Documentation/CodingStyle에 기술되어 있는 Linux 
        스타일을 따라 주시기 바랍니다. 예를 들어, 코드의 일부를 윈도우즈
        드라이버 키트와 공유하고 한번에 관리되기를 원하는 경우와 같이,
        코드의 일부가 다른 스타일로 되어 있는 경우, 그 코드는 깔끔하게
        분리하여 그런 사실을 명시하시기 바랍니다.
        
이식성:    포인터가 언제나 32비트인 것은 아니고, 모든 컴퓨터가 리틀엔디언이 
        아니며, 부동 소수점 연산이 가능하지 않은 경우도 있습니다.
        그리고 세심한 고려없이 인라인 x86 어셈블리 코드를 드라이버에서
        사용해서는 안됩니다. 순수한 x86 드라이버는 일반적으로 많지 않습니다.
        만일 당신이 x86 하드웨어만을 가지고 있다면, 이식성 테스트를 하기는
        어렵겠습니다만, 그러나 이식 가능성이 높은 코드인 것을 확인하기는
        어렵지 않을 것입니다.
        
명확성:    누구라도 어떻게 드라이버를 고칠 수 있는지를 알 수 있다면
        좋겠습니다. 그래야 버그 레포트가 아니라 패치를 받을 수 있으므로
        당신에게도 도움이 됩니다. 만일, 일부러 하드웨어의 동작을 이해하기 
        어렵게 만든 드라이버를 제출한다면, 그건 쓰레기통으로 들어갈 겁니다.

전력관리 지원:    리눅스가 많은 휴대용 기기와 데스크탑 시스템에 사용되고
        있기 때문에, 드라이버도 그런 시스템에서 사용될 가능성이 높습니다.
        따라서 드라이버를 구현함에 있어서, 시스템 수준의 대기 상태와 동작
        재개 전환 과정에 사용되는 .suspend 와 .resume 메쏘드를 구현함으로써
        시스템의 기본적인 전력 관리를 지원해야 합니다. 드라이버가 대기 상태와
        동작 재개를 문제없이 하는지 반드시 검증해야 하지만, 그걸 확신할 수
        없는 경우, 적어도 .suspend 메쏘드가 -ENOSYS ("이 기능이 구현되지
        않았음") 에러로 리턴할 수 있도록 정의해야 합니다.또 드라이버를 작성할
        때, 장치가 아무것도 하지 않는 동안에는 가능한 최소한의 전력을
        사용하도록 노력해야 합니다. 전력관리와 관련하여 드라이버를 시험하는
        방법은 Documentation/power/drivers-testing.txt를 보시고, 전력관리에
        관한 비교적 완전한 설명은 Documentation/power/devices.txt를
        참고하시기 바랍니다.
        
관리: 일반적으로, 드라이버 작성자에 의한 관리가 잘 이루어지고 있고,
        아주 명백하며, 체크할 것이 없는 경우가 아니라면, 패치는 드라이버
        작성자에게 전달될 것입니다. 만일 자신이 스스로 만든 드라이버의
        관리자이자 개정을 담당하고자 싶다면, 그 내용을 코멘트에 적으시고,
        당신의 드라이버에 대한 관리자 엔트리를 MAINTAINER 파일에 넣으시기
        바랍니다.

드라이버가 받아들여지는데 영향을 주지않는 것들
----------------------------------------------

벤터:      하드웨어 제조사가 직접 드라이버를 관리하는 것은 꽤 좋은 일입니다.
       만일, 다른 사람이 만들어 이미 소스 트리에 있는 드라이버가 아주 잘
	   동작하고 있다면, 당신의 드라이버가 '하드웨어를 만든 제조사'라
	   해도 받아들여질 거라고 기대해서는 안됩니다. 완벽한 드라이버가 되도록
	   현재 드라이버 작성자와 협력을 하는 것이 좋습니다.

저자: 큰 Linux 회사가 드라이버를 만들었는지, 아니면 당신이 만들었는지는
        중요하지 않습니다. 누구도 커널 트리에 접근할 수 있는 어떤 특별한 권한을
		가지지는 못합니다. 이와 다르게 이야기하는 사람이 있다면, 
		잘 모르고 하는 이야기 입니다.
		

자료들
------

Linux 커널 마스터 트리:
	ftp.??.kernel.org:/pub/linux/kernel/...
	?? 는 국가 코드, 예, "us", "uk", "fr", 등.

	http://git.kernel.org/?p=linux/kernel/git/torvalds/linux.git

Linux 커널 메일링 리스트:
	linux-kernel@vger.kernel.org
	[구독을 위해서는 majordomo@vger.kernel.org에 메일을 보내세요]

Linux Device Drivers, 제3판 (2.6.10까지 지원):
	http://lwn.net/Kernel/LDD3/  (무료 버전)

LWN.net:
	커널 개발 활동에 대한 주간 요약 - http://lwn.net/
	2.6 API 변경 내역:
		http://lwn.net/Articles/2.6-kernel-api/
	이전 드라이버를 2.6에 포팅하기:
		http://lwn.net/Articles/driver-porting/

KernelTrap:
	비정기적인 Linux 커널 관련 글들과 개발자 인터뷰
	http://kerneltrap.org/

KernelNewbies:
    초보 커널 개발자들을 위한 문서와 도움들
	http://kernelnewbies.org/

Linux USB 프로젝트:
	http://www.linux-usb.org/

커널 드라이버를 만들 때 하지말아야 할 것들 (저자: Arjan van de Ven):
	http://www.fenrus.org/how-to-not-write-a-device-driver-paper.pdf

Kernel Janitor:
	http://kernelnewbies.org/KernelJanitors

GIT, 빠른 버전 관리 시스템:
	http://git-scm.com/
