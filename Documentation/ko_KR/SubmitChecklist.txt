NOTE:
This is a version of Documentation/SubmitChecklist (from Linux-3.7.5),
translated into Korean.
Note that the purpose of this file is to be easier to read in Korean and
is not intended as a fork. If you have any comments or updates for this file
please try to update the original English file first.
If this translation is outdated or has any problem with translation,
contact the translator or maintainer of this file.
===
이 문서는 Documentation/SubmitChecklist (Linux-3.7.5)의
한글 번역본입니다.
이 문서의 내용에 문제나 수정할 것이 있다면 먼저 영어 원문을 확인하고 수정하는
것이 맞습니다. 번역이 잘못되었거나, 영어 원문이 개정되었다면 아래 번역자 또는
문서 관리자에게 연락하시기 바랍니다.

Translated by: Minsuk Lee <minsuk@hansung.ac.kr>
Translated on: SUN 2013 FEB 05

===

Linux 커널 패치 제출을 위한 체크리스트
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

이 문서는 개발자들이 자신이 만든 커널 패치가 좀 더 빨리 받아들여지기를 원한다면
해야할 일들을 적은 것입니다.

이 내용들은 Documentation/SubmittingPatches에 설명한 것이나, Linux 커널 패치의
제출과 관련한 다른 글들을 뛰어넘는 상위 개념의 이야기들입니다. 

1: 만일 어떤 기능을 이용한다면 바로 그 기능이 정의하거나, 선언한 파일을
   #include 해야합니다. 따라가다 보면 결국 당신이 사용하는 기능에 관한 그
   헤더를 열어주는 다른 헤더 파일에 종속되게 해서는 안됩니다.
   
2. 적용 가능한 모든 또는 수정된 CONFIG 옵션인 =y, =m, =n 에서 깨끗하게 
   빌드가 되어야 합니다. gcc 경고/에러, 링커 경고/에러가 없어야 합니다.
   
2b. allnoconfig, allmodconfig를 통과해야 합니다.

2c. O=builddir을 했을 때도 성공적으로 빌드가 되어야 합니다.

3. 크로스 컴파일 도구를 이용하여,자신의 컴퓨터에서, 또는 다른 빌드 팜에서
   여러 CPU 아키텍쳐에 대한 빌드에 성공해야 합니다. 

4: ppc64는 64비트 숫자를 'unsigned long'으로 쓰기 때문에, 크로스 컴파일
   검사를 위한 좋은 아키텍쳐입니다.

5: Documentation/CodingStyle에 구체적으로 나와있는 일반적인 코딩 스타일을
   패치가 잘 따라했는지 검사하시기 바랍니다. 제출하기 전에 패치 스타일 검사기
   (scripts/checkpatch.pl)을 이용하여 사소한 위반까지 모두 확인해야 합니다.
   그러고도 남은 위반에 대해서는 그 정당성을 설명할 수 있어야 합니다.
   
6: 새로운 또는 수정된 CONFIG가 config 메뉴를 망가뜨리지 않아야 합니다.

7: 모든 새로운 Kconfig 옵션은 도움말을 포함하여야 합니다.

8: 관련있는 Kconfig 조합에 대하여 세심한 리뷰가 있어야 합니다. 테스트 과정에서
   이 부분을 제대로 하기는 매우 어렵습니다. 머리를 잘 써야 하는 부분입니다. 

9: sparse를 이용하여 문제가 없도록 체크합니다.

10: 'make checkstack'과 'make namespacecheck'를 이용하여 발견된 모든 문제를
    해결합니다. 주의: checkstack은 문제를 명시적으로 드러내지는 않지만,
    스택을 512 byte 이상 쓰는 함수가 있다면, 그 함수가 개정 대상 후보입니다.

11: 글로벌 커널 API에 대해서는 kernel-doc을 포함해야 합니다. (static 함수에
    대해서는 꼭 만들 필요는 없지만, 만들어도 됩니다.) 'make htmldocs'나
    'make mandocs'로 kernel-doc이 제대로 만들어지는지 확인하고, 발생한
    이슈들을 해결합니다.    

12: CONFIG_PREEMPT, CONFIG_DEBUG_PREEMPT, CONFIG_DEBUG_SLAB,
    CONFIG_DEBUG_PAGEALLOC, CONFIG_DEBUG_MUTEXES, CONFIG_DEBUG_SPINLOCK,
    CONFIG_DEBUG_ATOMIC_SLEEP, CONFIG_PROVE_RCU, CONFIG_DEBUG_OBJECTS_RCU_HEAD
    등과 같은 설정을 모두 동시에 켜고 시험을 해야합니다.
    
13: CONFIG_SMP와 CONFIG_PREEMPT를 켰을 때, 껐을 때 모두 빌드가 잘 되는지, 또
    성공적으로 실행이 되는지를 시험해야 합니다.
    
14: CONFIG_LBDAF를 켰을 때, 껐을 때 모두를 테스트 하여, 입출력/디스크 등에
    영향을 주는지 확인해야 합니다.

15: lockdep 기능을 모두 활성화하여, 모든 코드 경로에 대한 검사를 해야 합니다.

16: 모든 새로운 /proc 엔트리에 대하여 Documentation/ 아래에 문서화 합니다.

17: 모든 새로운 커널 부트 파라메터를 Documentation/kernel-parameters.txt에
    문서화 합니다.

18: 모든 새로운 모듈 파타메터는 MODULE_PARM_DESC()로 문서화 합니다.
    
19: 모든 새로운 사용자 공간 인터페이스는 Documentation/ABI/에 문서화 합니다.
    자세한 내용은 Documentation/ABI/README를 참조하시기 바랍니다.
    사용자 공간 인터페이스를 바꾸는 패치는 반드시 linux-api@vger.kernel.org를
    참조(cc)로 지정하여 제출합니다.
    
20: 'make headers_check'를 모두 통과하는지 확인합니다.

21: 적어도 slab과 page 할당에 실패한 경우는 강제로 만들어 (fault injection, 
    오류 주입) 검사합니다. 강제로 실패하도록 만드는 방법에 관해서는
    Documentation/fault-injection/을 참고하시기 바랍니다.
    
    만약에 새로운 코드가 아주 중요한 것이라면, 서브시스템 단위의 오류 주입
    시험을 하는 것이 바람직합니다.

22: 새로 추가된 코드는 'gcc -W' ("make EXTRA_CFLAGS=-W" 명령을 사용)로 
    컴파일을 해봐야 합니다. 이 방법은 많은 메시지를 출력하지만, "warning:
    comparison between signed and unsigned (경고: signed 값과 unsigned 값의
    비교)"와 같은 버그를 찾아내는데 좋습니다.

23: 이전에 쌓여있던 패치들. VM, VFS 등 다른 서브시스템에서의 다양한 변경
    내용과의 사이에 문제가 없는지를 확인하기 위해 -mm 패치와 머지한 뒤
    시험해야 합니다.

24: 모든 메모리 베리어 {예, barrier(), rmb(), wmb()}의 사용에 대하여 그것이
    어떤 동작을 하고 왜 필요한지에 대하여 소스 코드에 코멘트가 필요합니다. 

25: 만일 패치에 의해서 ioctl이 추가되었다면, 그 내용을
    Documentation/ioctl/ioctl-number.txt에 기록해야 합니다.

26: 당신이 수정한 소스 코드가 다음에 나열된 kconfig 심볼들과 관련된 커널
    API나 기능을 사용하거나, 종속되어 있다면, 관련된 kconfig 심볼을
    비활성화 그리고/또는 =m (이 옵션도 가능하다면) 상태로 하는 많은 조합의 
    빌드에 대하여 시험을 해야 합니다. [모든 경우를 동시에 할 수는 없으므로,
    다양한, 임의의 조합에 대하여 시험을 합니다.]

    CONFIG_SMP, CONFIG_SYSFS, CONFIG_PROC_FS, CONFIG_INPUT, CONFIG_PCI,
    CONFIG_BLOCK, CONFIG_PM, CONFIG_HOTPLUG, CONFIG_MAGIC_SYSRQ,
    CONFIG_NET, CONFIG_INET=n (CONFIG_NET=y 로 둔 채로)
